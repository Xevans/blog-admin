Effectively creating a CMS

Create a page that allows you to build a blog top down

Title field
summary field
featured_media
featured_media_caption
featured_media_attr
heading 1
paragraph 1
paragraph 2
media_link 1
caption 1
heading 2
media_link 2
caption 2
paragraph 3

you can pless a button and select what element you would like to add
ex: if you select paragraph, you will get a text box you can write in

ex2: if you select media, you will have 3 req fields. media link, caption, attribution

(future idea: work in a split window where output blogg shows in left screen)


Main Tasks:
- Setup firebase auth in conn module (follow docs). (done)
- create context to store auth. (done)
- test getAuth (done)
- Create a test form to send the doc with auth.

if all works at the stage, proceed to create the ui elements mentioned above.


3/8/25

- Like above, want to be able to create form fields
    - On 'submit', want to generate the blog as html using the field data
    - Then show a preview below the form (can do something fancy like a split view later)
    - if everything looks okay, you can click an upload button which will... 
        - prompt category selection details
        - when completed, you can click a confirm button to finalize the upload.


Main Tasks:

Create dynamic form.

Each "Section" is an object

A section contains a:
    - heading
    - paragraph
    - Media link
    - Media caption
    - Media attribution
where each field is optional.

I will have the ability to add more objects to the array
where each object's prperty will corespond to the field for that section


3/14/25
Note: when you hit enter in a textarea, it is appended to the string as '\n'
treat \n as <br/>

For the realtime, Renderedview, I am going to drill down the necessary state objects to be converted to HTML.
Since the RenderedView component is the only component that will be accessing this data 
and there will be no two-way transactions between the child and parent, prop drilling will be just fine


3-15-25
Might not want to store the blog as TSX. 
Instead, apply the logic behind the rendered-blog-view to the user-facing blog project.
The user app only needs two things: The Blog Header object and the BlogSection object Array

3-18-25
Good job. We can recreate an existing blog using this tool now. Here are the remaining tasks:

Blog Renderer:
Get bold text to show up (similar approach to line breaks?) [optional]
Show embedded links in text [lesser priority at the moment]

Blog Uploader:
Have firebase append a unique identifier to blog records. (this happends by default, but a string identifier (the title) would be nice.)
Consider how firebase will store the data structure.
Implement logic to upload (configure firebase to allow writes from auth users only).

Blog:
Update blog to fetch and render stored blogs from firebase as a test.
Consider how the Blog app will know which blog to fetch
    - I want a link to any particular blog to contain a blogId argument that tells the app which blog to fetch (the blog with the matching id)
    - usecase: is send a blog to a friend. It ends in the arg /blog=mission the the app renders the page and fetches the data for mission.

reference:
https://res.cloudinary.com/dn9rcml4g/image/upload/c_crop,h_600,w_800/blog-pics/pc-screen-motivation
https://res.cloudinary.com/dn9rcml4g/image/upload/f_auto,q_auto/v1/blog-pics/dev-image-1
https://res.cloudinary.com/dn9rcml4g/image/upload/v1739318928/blog-pics/cat-computer-gif.gif



Tried making a writing blog and had an error, investigate.
Forgot preventDeafault function. Prevents a form's default behavior (page refresh) when data is submitted


3/25/25
For an edit featured

Could show a table that shows the collections as categories
When a category is selected, show a paginated table of blogs
When a blog is clicked on, update the state of header and sections with the pulled ones.
This should update the form on the ui

since I'm leveraging setDoc in the firestore SDK. the document with the matching id (in this case the title field) will be updated unless I change the title.


A way to handle links for attributions Add an attribution link field
in the renderer, if a link is provided, render the attr in an a tag



For paragraphs, we could add links at the end, using [brackets to explain where they go]
Ex: see my last blog* where I make an api call using the docs at firebase.com*

links[{name: "See my last blog", link:"https..."}, {name: "Firebase docs", link:"https..."}]
The following will show at the end of the paragraph
link1: <a href="https://link.com">See my last blog</a>
link1: <a href="https://link.com">Firebase docs</a>


4/6/25
Consider making collections (categories) for food, cooking, gaming, travel, and more.
On the Blog app, it will grab from them each and show the latest in descending order.
a drop down can be utilized to filter for a specific category.

All in all, they will effectively be different collections in the DB but they will all be shown in the Lifestyle route.